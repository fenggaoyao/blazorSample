#pragma checksum "/Users/cloudsu/Documents/netcore/blazor/WebApplication1/Shared/Weight.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "46e744d1d21991b52f0721f6489531050b4da9d3"
// <auto-generated/>
#pragma warning disable 1591
#pragma warning disable 0414
#pragma warning disable 0649
#pragma warning disable 0169

namespace WebApplication1.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using WebApplication1;
    using WebApplication1.Shared;
    public class Weight : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
        }
        #pragma warning restore 1998
#line 12 "/Users/cloudsu/Documents/netcore/blazor/WebApplication1/Shared/Weight.razor"
                

        protected override void OnAfterRender()
        {
            Model.Register(() =>
            {
                _weight = Model.IsImperial ? (int)Model.WeightPounds :
                    (int)(Model.PoundsToKilograms(Model.WeightPounds));
                base.StateHasChanged();
            });
            base.OnAfterRender();
        }

        protected override void OnInit()
        {
            base.OnInit();
            _weight = (int)(Math.Round(Model.WeightPounds));
        }

        bool ErrorState = false;

        string InputClass
        {
            get
            {
                return ErrorState ? "error" : string.Empty;
            }
        }

        int MinWeight
        {
            get
            {
                return Model.IsImperial ? Globals.MinWeightPounds : 
                    Globals.MinWeightKilograms;
            }
        }

        int MaxWeight
        {
            get
            {
                return Model.IsImperial ? Globals.MaxWeightPounds : 
                    Globals.MaxWeightKilograms;
            }
        }

        int _weight;

        int WeightAmt
        {
            get
            {
                return _weight;
            }

            set
            {
                if (value != _weight)
                {
                    _weight = value;
                    if (Model.IsImperial)
                    {
                        if (value < Globals.MinWeightPounds || value > Globals.MaxWeightPounds)
                        {
                            ErrorState = true;
                        }
                        else
                        {
                            ErrorState = false;
                            Model.WeightPounds = value;
                        }
                    }
                    else
                    {
                        if (value < Globals.MinWeightKilograms || value > Globals.MaxWeightKilograms)
                        {
                            ErrorState = true;
                        }
                        else
                        {
                            ErrorState = false;
                            Model.WeightPounds = Model.KilogramsToPounds(value);
                        }
                    }
                }
            }
        }

        string WeightUom
        {
            get
            {
                return Model.IsImperial ? "磅" : "公斤";
            }
        }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModel Model { get; set; }
    }
}
#pragma warning restore 1591
