#pragma checksum "/Users/cloudsu/Documents/netcore/blazor/WebApplication1/Shared/Height.razor" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "8f87a05b1e3051dbe7490bc45a50e158da750b40"
// <auto-generated/>
#pragma warning disable 1591
namespace WebApplication1.Shared
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Components;
    using System.Net.Http;
    using Microsoft.AspNetCore.Components.Forms;
    using Microsoft.AspNetCore.Components.Layouts;
    using Microsoft.AspNetCore.Components.Routing;
    using Microsoft.JSInterop;
    using WebApplication1;
    using WebApplication1.Shared;
    public class Height : Microsoft.AspNetCore.Components.ComponentBase
    {
        #pragma warning disable 1998
        protected override void BuildRenderTree(Microsoft.AspNetCore.Components.RenderTree.RenderTreeBuilder builder)
        {
            builder.OpenElement(0, "div");
            builder.AddAttribute(1, "class", "unit");
            builder.AddMarkupContent(2, "\n    ");
            builder.AddMarkupContent(3, "<div class=\"label\">身高:</div>\n    ");
            builder.OpenElement(4, "div");
            builder.AddAttribute(5, "class", "labelTarget");
            builder.AddMarkupContent(6, "\n        ");
            builder.AddContent(7, MinHeightText);
            builder.AddMarkupContent(8, "\n        ");
            builder.OpenElement(9, "input");
            builder.AddAttribute(10, "type", "range");
            builder.AddAttribute(11, "step", "1");
            builder.AddAttribute(12, "min", MinHeight);
            builder.AddAttribute(13, "max", MaxHeight);
            builder.AddAttribute(14, "value", Microsoft.AspNetCore.Components.BindMethods.GetValue(HeightAmt));
            builder.AddAttribute(15, "onchange", Microsoft.AspNetCore.Components.EventCallback.Factory.CreateBinder(this, __value => HeightAmt = __value, HeightAmt));
            builder.CloseElement();
            builder.AddMarkupContent(16, "\n        ");
            builder.AddContent(17, MaxHeightText);
            builder.AddMarkupContent(18, "\n        <br>\n        ");
            builder.AddContent(19, HeightDisplay);
            builder.AddMarkupContent(20, "\n    ");
            builder.CloseElement();
            builder.AddMarkupContent(21, "\n");
            builder.CloseElement();
        }
        #pragma warning restore 1998
#line 18 "/Users/cloudsu/Documents/netcore/blazor/WebApplication1/Shared/Height.razor"
            

    private int _height;

    protected override void OnAfterRender()
    {
        Model.Register(() =>
        {
            _height = Model.IsImperial ? (int)Model.HeightInches :
                (int)(Model.InchesToCentimeters(Model.HeightInches));
            base.StateHasChanged();
        });
        base.OnAfterRender();
    }

    protected override void OnInit()
    {
        base.OnInit();
        _height = (int)(Math.Round(Model.HeightInches));
    }

    int MinHeight
    {
        get
        {
            return Model.IsImperial ? Globals.MinHeightInches :
                Globals.MinHeightCentimeters;
        }
    }

    string MinHeightText
    {
        get
        {
            return RenderHeight(Model.IsImperial ?
                Globals.MinHeightInches :
                Globals.MinHeightCentimeters);
        }
    }

    int MaxHeight
    {
        get
        {
            return Model.IsImperial ? Globals.MaxHeightInches :
                Globals.MaxHeightCentimeters;
        }
    }

    string MaxHeightText
    {
        get
        {
            return RenderHeight(Model.IsImperial ?
                Globals.MaxHeightInches :
                Globals.MaxHeightCentimeters);
        }
    }

    string HeightDisplay
    {
        get
        {
            return RenderHeight(_height);
        }
    }

    string RenderHeight(int height)
    {
        if (Model.IsImperial)
        {
            return Model.InchesToFeetDisplay(height);
        }
        return $"{height} 厘米";
    }

    int HeightAmt
    {
        get
        {
            return _height;
        }

        set
        {
            if (value != _height)
            {
                _height = value;
                Model.HeightInches = Model.IsImperial ? value : Model.CentimetersToInches(value);
            }
        }
    }

#line default
#line hidden
        [global::Microsoft.AspNetCore.Components.InjectAttribute] private IModel Model { get; set; }
    }
}
#pragma warning restore 1591
